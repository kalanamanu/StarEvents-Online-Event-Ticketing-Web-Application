@model StarEvents.ViewModels.OrganizerReportsViewModel
@{
    ViewBag.Title = "Organizer Reports";
    Layout = "~/Views/Shared/_LayoutOrganizer.cshtml";
}

<style>
    :root {
        --primary: #1259f3;
        --primary-light: #e8efff;
        --primary-dark: #0d47c1;
        --secondary: #1a237e;
        --success: #10b981;
        --warning: #f59e0b;
        --danger: #ef4444;
        --dark: #1f2937;
        --gray: #6b7280;
        --gray-light: #f8fafc;
        --gray-border: #e5e7eb;
        --shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
        --shadow-lg: 0 8px 30px rgba(0, 0, 0, 0.12);
    }

    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    body {
        background: #f8fafc;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        color: var(--dark);
    }

    .reports-dashboard {
        max-width: 1400px;
        margin: 0 auto;
        padding: 20px;
    }

    /* Header Section */
    .dashboard-header {
        background: white;
        border-radius: 16px;
        padding: 30px;
        box-shadow: var(--shadow);
        border: 1px solid var(--gray-border);
        margin-bottom: 30px;
        position: relative;
        overflow: hidden;
    }

        .dashboard-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
        }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        flex-wrap: wrap;
        gap: 20px;
    }

    .header-info {
        flex: 1;
    }

    .dashboard-title {
        font-size: 1.8rem;
        font-weight: 800;
        color: var(--dark);
        margin-bottom: 8px;
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .dashboard-icon {
        color: var(--primary);
    }

    .dashboard-subtitle {
        color: var(--gray);
        font-size: 1rem;
        font-weight: 500;
    }

    .header-actions {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
    }

    .btn-download {
        background: linear-gradient(135deg, var(--success), #059669);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 12px 24px;
        font-weight: 600;
        font-size: 0.95rem;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        text-decoration: none;
    }

        .btn-download:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(16, 185, 129, 0.3);
            color: white;
            text-decoration: none;
        }

    /* Stats Grid */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background: white;
        border-radius: 16px;
        padding: 25px;
        box-shadow: var(--shadow);
        border: 1px solid var(--gray-border);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

        .stat-card:hover {
            transform: translateY(-3px);
            box-shadow: var(--shadow-lg);
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            border-radius: 2px 0 0 2px;
        }

    .stat-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 15px;
    }

    .stat-info {
        flex: 1;
    }

    .stat-title {
        font-size: 0.9rem;
        font-weight: 600;
        color: var(--gray);
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 5px;
    }

    .stat-value {
        font-size: 2rem;
        font-weight: 800;
        color: var(--dark);
        line-height: 1;
    }

    .stat-subtitle {
        font-size: 0.8rem;
        color: var(--gray);
        margin-top: 4px;
    }

    .stat-icon {
        width: 50px;
        height: 50px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.3rem;
    }

    .stat-card:nth-child(1) .stat-icon {
        background: var(--primary-light);
        color: var(--primary);
    }

    .stat-card:nth-child(2) .stat-icon {
        background: #fef3c7;
        color: var(--warning);
    }

    .stat-card:nth-child(3) .stat-icon {
        background: #dcfce7;
        color: var(--success);
    }

    /* Charts Section */
    .charts-section {
        background: white;
        border-radius: 16px;
        padding: 25px;
        box-shadow: var(--shadow);
        border: 1px solid var(--gray-border);
        margin-bottom: 30px;
    }

    .chart-header {
        margin-bottom: 20px;
    }

    .chart-title {
        font-size: 1.3rem;
        font-weight: 700;
        color: var(--dark);
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .chart-icon {
        color: var(--primary);
    }

    .chart-container {
        position: relative;
        height: 400px;
    }

    /* Events Section */
    .events-section {
        background: white;
        border-radius: 16px;
        box-shadow: var(--shadow);
        border: 1px solid var(--gray-border);
        overflow: hidden;
        margin-bottom: 40px;
    }

    .section-header {
        background: var(--gray-light);
        padding: 20px 25px;
        border-bottom: 1px solid var(--gray-border);
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 15px;
    }

    .section-title {
        font-size: 1.3rem;
        font-weight: 700;
        color: var(--dark);
        margin: 0;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .section-icon {
        color: var(--primary);
    }

    .events-count {
        background: var(--primary);
        color: white;
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.9rem;
        font-weight: 600;
    }

    .events-table {
        width: 100%;
        border-collapse: collapse;
    }

        .events-table th {
            background: var(--gray-light);
            padding: 15px 20px;
            text-align: left;
            font-weight: 700;
            color: var(--dark);
            border-bottom: 1px solid var(--gray-border);
            font-size: 0.85rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .events-table td {
            padding: 15px 20px;
            border-bottom: 1px solid var(--gray-border);
            color: var(--dark);
        }

        .events-table tr:last-child td {
            border-bottom: none;
        }

        .events-table tr:hover {
            background: var(--gray-light);
        }

    .event-title {
        font-weight: 600;
        color: var(--primary);
    }

    .event-date {
        font-weight: 600;
        color: var(--dark);
    }

    .sales-info {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .sales-count {
        font-weight: 700;
        color: var(--dark);
    }

    .sales-progress {
        font-size: 0.8rem;
        color: var(--gray);
    }

    .revenue-amount {
        font-weight: 700;
        color: var(--success);
        font-size: 0.95rem;
    }

    .status-badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-weight: 700;
        font-size: 0.8rem;
        display: inline-flex;
        align-items: center;
        gap: 4px;
    }

    .status-upcoming {
        background: linear-gradient(135deg, #fef3c7, #fde68a);
        color: #92400e;
        border: 1px solid #fde68a;
    }

    .status-completed {
        background: linear-gradient(135deg, #dcfce7, #bbf7d0);
        color: #166534;
        border: 1px solid #bbf7d0;
    }

    .status-ongoing {
        background: linear-gradient(135deg, #dbeafe, #93c5fd);
        color: #1e40af;
        border: 1px solid #93c5fd;
    }

    .action-buttons {
        display: flex;
        gap: 8px;
    }

    .btn-analytics {
        background: linear-gradient(135deg, var(--primary), var(--secondary));
        color: white;
        border: none;
        border-radius: 8px;
        padding: 8px 16px;
        font-weight: 600;
        font-size: 0.85rem;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        text-decoration: none;
    }

        .btn-analytics:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(18, 89, 243, 0.3);
            color: white;
            text-decoration: none;
        }

    .progress-bar {
        width: 100%;
        height: 6px;
        background: var(--gray-border);
        border-radius: 3px;
        overflow: hidden;
        margin-top: 4px;
    }

    .progress-fill {
        height: 100%;
        background: linear-gradient(135deg, var(--primary), var(--secondary));
        border-radius: 3px;
        transition: width 0.3s ease;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .reports-dashboard {
            padding: 15px;
        }

        .dashboard-header {
            padding: 25px 20px;
        }

        .header-content {
            flex-direction: column;
        }

        .stats-grid {
            grid-template-columns: 1fr;
            gap: 15px;
        }

        .section-header {
            flex-direction: column;
            align-items: flex-start;
        }

        .events-table {
            display: block;
            overflow-x: auto;
            white-space: nowrap;
        }

        .action-buttons {
            flex-direction: column;
        }
    }

    @@media (max-width: 480px) {
        .dashboard-title {
            font-size: 1.5rem;
        }

        .stat-card {
            padding: 20px;
        }

        .events-table th,
        .events-table td {
            padding: 12px 15px;
        }

        .chart-container {
            height: 300px;
        }
    }
</style>

<div class="reports-dashboard">
    <!-- Header Section -->
    <div class="dashboard-header">
        <div class="header-content">
            <div class="header-info">
                <h1 class="dashboard-title">
                    <i class="fas fa-chart-pie dashboard-icon"></i>
                    Organizer Reports
                </h1>
                <div class="dashboard-subtitle">
                    Comprehensive analytics and insights for all your events
                </div>
            </div>
            <div class="header-actions">
                <a href="@Url.Action("DownloadReports")" class="btn-download">
                    <i class="fas fa-download"></i>
                    Download CSV Report
                </a>
            </div>
        </div>
    </div>

    <!-- Key Metrics -->
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-header">
                <div class="stat-info">
                    <div class="stat-title">Total Events</div>
                    <div class="stat-value">@Model.TotalEvents</div>
                    <div class="stat-subtitle">All time events created</div>
                </div>
                <div class="stat-icon">
                    <i class="fas fa-calendar-alt"></i>
                </div>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-header">
                <div class="stat-info">
                    <div class="stat-title">Total Tickets Sold</div>
                    <div class="stat-value">@Model.TotalTicketsSold</div>
                    <div class="stat-subtitle">Across all events</div>
                </div>
                <div class="stat-icon">
                    <i class="fas fa-ticket-alt"></i>
                </div>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-header">
                <div class="stat-info">
                    <div class="stat-title">Total Revenue</div>
                    <div class="stat-value">LKR @Model.TotalRevenue.ToString("N0")</div>
                    <div class="stat-subtitle">Gross earnings</div>
                </div>
                <div class="stat-icon">
                    <i class="fas fa-money-bill-wave"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Sales Trend Chart -->
    <div class="charts-section">
        <div class="chart-header">
            <h3 class="chart-title">
                <i class="fas fa-chart-line chart-icon"></i>
                Sales Trend Overview
            </h3>
        </div>
        <div class="chart-container">
            <canvas id="salesChart"></canvas>
        </div>
    </div>

    <!-- Events Performance Section -->
    <div class="events-section">
        <div class="section-header">
            <h2 class="section-title">
                <i class="fas fa-list section-icon"></i>
                All Events Performance
                <span class="events-count">@Model.Events.Count Events</span>
            </h2>
        </div>

        <div class="table-container">
            <table class="events-table">
                <thead>
                    <tr>
                        <th>Event</th>
                        <th>Date</th>
                        <th>Sales Progress</th>
                        <th>Revenue</th>
                        <th>Status</th>
                        <th>Analytics</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ev in Model.Events)
                    {
                        var progressPercentage = ev.TotalSeats > 0 ? (ev.TicketsSold * 100.0) / ev.TotalSeats : 0;
                        var isUpcoming = ev.EventDate > DateTime.Now;
                        var isCompleted = ev.EventDate < DateTime.Now.AddDays(-1);
                        var statusClass = isUpcoming ? "status-upcoming" : isCompleted ? "status-completed" : "status-ongoing";
                        var statusText = isUpcoming ? "Upcoming" : isCompleted ? "Completed" : "Ongoing";
                        var statusIcon = isUpcoming ? "fas fa-clock" : isCompleted ? "fas fa-check-circle" : "fas fa-play-circle";

                        <tr>
                            <td>
                                <div class="event-title">@ev.EventTitle</div>
                            </td>
                            <td>
                                <div class="event-date">@ev.EventDate.ToString("MMM dd, yyyy")</div>
                            </td>
                            <td style="min-width: 150px;">
                                <div class="sales-info">
                                    <div class="sales-count">@ev.TicketsSold / @ev.TotalSeats sold</div>
                                    <div class="sales-progress">@progressPercentage.ToString("0.0")% sold</div>
                                    <div class="progress-bar">
                                        <div class="progress-fill" style="width: @progressPercentage%;"></div>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <span class="revenue-amount">LKR @ev.Revenue.ToString("N0")</span>
                            </td>
                            <td>
                                <span class="status-badge @statusClass">
                                    <i class="@statusIcon"></i>
                                    @statusText
                                </span>
                            </td>
                            <td>
                                <div class="action-buttons">
                                    <a href="@Url.Action("EventAnalytics", new { id = ev.EventId })" class="btn-analytics">
                                        <i class="fas fa-chart-bar"></i>
                                        View Analytics
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Add smooth animations
        document.addEventListener('DOMContentLoaded', function() {
            const cards = document.querySelectorAll('.stat-card, .charts-section, .events-section');
            cards.forEach((card, index) => {
                card.style.opacity = '0';
                card.style.transform = 'translateY(20px)';

                setTimeout(() => {
                    card.style.transition = 'all 0.5s ease';
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, index * 100);
            });

            // Initialize chart after animations
            setTimeout(initializeChart, 500);
        });

        function initializeChart() {
            var ctx = document.getElementById('salesChart').getContext('2d');
            var salesChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.SalesTrend.Select(x => x.Date.ToString("MMM dd")))),
                    datasets: [{
                        label: 'Tickets Sold',
                        data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.SalesTrend.Select(x => x.TicketsSold))),
                        borderColor: '#1259f3',
                        backgroundColor: 'rgba(18, 89, 243, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4
                    }, {
                        label: 'Revenue (LKR)',
                        data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.SalesTrend.Select(x => x.Revenue))),
                        borderColor: '#10b981',
                        backgroundColor: 'rgba(16, 185, 129, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4,
                        yAxisID: 'y1'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Tickets Sold'
                            },
                            grid: {
                                drawOnChartArea: true,
                            },
                        },
                        y1: {
                            beginAtZero: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'Revenue (LKR)'
                            },
                            grid: {
                                drawOnChartArea: false,
                            },
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label.includes('Revenue')) {
                                        return label + ': LKR ' + context.parsed.y.toLocaleString();
                                    }
                                    return label + ': ' + context.parsed.y;
                                }
                            }
                        }
                    }
                }
            });
        }

        // Add loading state to download button
        document.querySelector('.btn-download').addEventListener('click', function(e) {
            const originalText = this.innerHTML;
            this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Generating Report...';
            this.style.pointerEvents = 'none';

            setTimeout(() => {
                this.innerHTML = originalText;
                this.style.pointerEvents = '';
            }, 3000);
        });
    </script>
}