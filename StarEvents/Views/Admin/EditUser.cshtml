@model StarEvents.ViewModels.EditUserViewModel
@{
    ViewBag.Title = "Edit User";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<style>
    :root {
        --primary: #1259f3;
        --primary-light: #e8efff;
        --primary-dark: #0d47c1;
        --secondary: #1a237e;
        --success: #10b981;
        --warning: #f59e0b;
        --danger: #ef4444;
        --dark: #1f2937;
        --gray: #6b7280;
        --gray-light: #f8fafc;
        --gray-border: #e5e7eb;
        --shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
        --shadow-lg: 0 8px 30px rgba(0, 0, 0, 0.12);
    }

    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    body {
        background: #f8fafc;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        color: var(--dark);
        line-height: 1.6;
    }

    .edit-user-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 20px;
    }

    /* Header Section */
    .dashboard-header {
        background: white;
        border-radius: 16px;
        padding: 30px;
        box-shadow: var(--shadow);
        border: 1px solid var(--gray-border);
        margin-bottom: 30px;
        position: relative;
        overflow: hidden;
    }

        .dashboard-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
        }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        flex-wrap: wrap;
        gap: 20px;
    }

    .header-info {
        flex: 1;
    }

    .dashboard-title {
        font-size: 2rem;
        font-weight: 800;
        color: var(--dark);
        margin-bottom: 8px;
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .dashboard-icon {
        color: var(--primary);
    }

    .dashboard-subtitle {
        color: var(--gray);
        font-size: 1rem;
        font-weight: 500;
    }

    .header-actions {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
    }

    /* Form Section */
    .edit-user-section {
        background: white;
        border-radius: 16px;
        box-shadow: var(--shadow);
        border: 1px solid var(--gray-border);
        overflow: hidden;
        margin-bottom: 30px;
    }

    .section-header {
        background: var(--gray-light);
        padding: 20px 25px;
        border-bottom: 1px solid var(--gray-border);
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 15px;
    }

    .section-title {
        font-size: 1.3rem;
        font-weight: 700;
        color: var(--dark);
        margin: 0;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .section-icon {
        color: var(--primary);
    }

    .form-content {
        padding: 30px;
    }

    .form-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 25px;
    }

    .form-card {
        background: var(--gray-light);
        border-radius: 12px;
        padding: 25px;
        border: 1px solid var(--gray-border);
    }

    .card-title {
        font-size: 1.1rem;
        font-weight: 700;
        color: var(--dark);
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 8px;
        padding-bottom: 12px;
        border-bottom: 1px solid var(--gray-border);
    }

    .card-icon {
        color: var(--primary);
    }

    /* Form Elements */
    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        display: block;
        font-weight: 600;
        color: var(--dark);
        margin-bottom: 8px;
        font-size: 0.9rem;
    }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid var(--gray-border);
        border-radius: 8px;
        font-size: 0.9rem;
        background: white;
        transition: all 0.3s ease;
        font-family: inherit;
    }

        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(18, 89, 243, 0.1);
        }

        .form-control:read-only,
        .form-control:disabled {
            background-color: var(--gray-light);
            color: var(--gray);
            cursor: not-allowed;
        }

    .form-select {
        appearance: none;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
        background-position: right 12px center;
        background-repeat: no-repeat;
        background-size: 16px;
        padding-right: 40px;
    }

    textarea.form-control {
        resize: vertical;
        min-height: 100px;
    }

    .radio-group {
        display: flex;
        gap: 20px;
        margin-top: 8px;
    }

    .radio-label {
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 500;
        color: var(--dark);
        cursor: pointer;
    }

    .radio-input {
        width: 18px;
        height: 18px;
        accent-color: var(--primary);
    }

    .field-note {
        font-size: 0.8rem;
        color: var(--gray);
        margin-top: 4px;
        font-style: italic;
    }

    /* Role-specific sections */
    .role-section {
        margin-top: 10px;
    }

    .role-section-title {
        font-size: 1.1rem;
        font-weight: 700;
        margin: 30px 0 20px 0;
        color: var(--primary);
        display: flex;
        align-items: center;
        gap: 8px;
        padding-bottom: 10px;
        border-bottom: 2px solid var(--primary-light);
    }

    /* Buttons */
    .btn {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 12px 24px;
        border-radius: 10px;
        font-weight: 600;
        font-size: 0.9rem;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        border: none;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--primary), var(--secondary));
        color: white;
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(18, 89, 243, 0.3);
            color: white;
            text-decoration: none;
        }

    .btn-secondary {
        background: white;
        color: var(--primary);
        border: 2px solid var(--primary);
    }

        .btn-secondary:hover {
            background: var(--primary-light);
            transform: translateY(-2px);
            color: var(--primary);
            text-decoration: none;
        }

    .btn-success {
        background: linear-gradient(135deg, var(--success), #059669);
        color: white;
    }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(16, 185, 129, 0.3);
            color: white;
            text-decoration: none;
        }

    .form-actions {
        display: flex;
        gap: 15px;
        margin-top: 30px;
        padding-top: 20px;
        border-top: 1px solid var(--gray-border);
        flex-wrap: wrap;
    }

    /* Validation */
    .text-danger {
        color: var(--danger);
        font-size: 0.8rem;
        margin-top: 5px;
        display: block;
        font-weight: 500;
    }

    .field-validation-error {
        color: var(--danger);
        font-size: 0.8rem;
        margin-top: 5px;
        display: block;
        font-weight: 500;
    }

    .input-validation-error {
        border-color: var(--danger);
        background-color: #fef2f2;
    }

        .input-validation-error:focus {
            border-color: var(--danger);
            box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
        }

    /* Role Badge */
    .role-badge {
        padding: 8px 16px;
        border-radius: 20px;
        font-weight: 700;
        font-size: 0.9rem;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        margin-left: 10px;
    }

    .role-admin {
        background: linear-gradient(135deg, #fee2e2, #fecaca);
        color: #991b1b;
        border: 1px solid #fecaca;
    }

    .role-organizer {
        background: linear-gradient(135deg, #fef3c7, #fde68a);
        color: #92400e;
        border: 1px solid #fde68a;
    }

    .role-customer {
        background: linear-gradient(135deg, #dcfce7, #bbf7d0);
        color: #166534;
        border: 1px solid #bbf7d0;
    }

    /* Status Indicator */
    .status-indicator {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        padding: 6px 12px;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.8rem;
        margin-left: 10px;
    }

    .status-active {
        background: #dcfce7;
        color: #166534;
        border: 1px solid #bbf7d0;
    }

    .status-inactive {
        background: #f1f5f9;
        color: var(--gray);
        border: 1px solid var(--gray-border);
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .edit-user-container {
            padding: 15px;
        }

        .dashboard-header {
            padding: 25px 20px;
        }

        .header-content {
            flex-direction: column;
        }

        .form-grid {
            grid-template-columns: 1fr;
        }

        .form-content {
            padding: 20px;
        }

        .form-actions {
            flex-direction: column;
        }

        .btn {
            width: 100%;
            justify-content: center;
        }

        .radio-group {
            flex-direction: column;
            gap: 10px;
        }
    }

    @@media (max-width: 480px) {
        .dashboard-title {
            font-size: 1.6rem;
        }

        .form-card {
            padding: 20px;
        }
    }
</style>

<div class="edit-user-container">
    <!-- Header Section -->
    <div class="dashboard-header">
        <div class="header-content">
            <div class="header-info">
                <h1 class="dashboard-title">
                    <i class="fas fa-user-edit dashboard-icon"></i>
                    Edit User
                </h1>
                <div class="dashboard-subtitle">
                    Update user information and profile details
                </div>
            </div>
            <div class="header-actions">
                <a href="@Url.Action("Users", "Admin")" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i>
                    Back to Users
                </a>
            </div>
        </div>
    </div>

    <!-- Edit User Form Section -->
    <div class="edit-user-section">
        <div class="section-header">
            <h2 class="section-title">
                <i class="fas fa-user-cog section-icon"></i>
                User Information
                <span class="role-badge @("role-" + (Model.Role?.ToLower() ?? "customer"))">
                    <i class="fas @(Model.Role?.ToLower() == "admin" ? "fa-shield-alt" : Model.Role?.ToLower() == "organizer" ? "fa-calendar-alt" : "fa-user")"></i>
                    @Model.Role
                </span>
                <span class="status-indicator @(Model.IsActive ? "status-active" : "status-inactive")">
                    <i class="fas @(Model.IsActive ? "fa-check-circle" : "fa-times-circle")"></i>
                    @(Model.IsActive ? "Active" : "Inactive")
                </span>
            </h2>
        </div>

        <div class="form-content">
            @using (Html.BeginForm("EditUser", "Admin", FormMethod.Post, new { @class = "edit-user-form" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.UserId)

                <div class="form-grid">
                    <!-- Basic Information Card -->
                    <div class="form-card">
                        <h3 class="card-title">
                            <i class="fas fa-info-circle card-icon"></i>
                            Basic Information
                        </h3>

                        <div class="form-group">
                            @Html.LabelFor(m => m.Username, htmlAttributes: new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.Username, new { @class = "form-control", placeholder = "Enter username" })
                            @Html.ValidationMessageFor(m => m.Username, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.Email, htmlAttributes: new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "Enter email address" })
                            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.Role, htmlAttributes: new { @class = "form-label" })
                            @Html.DropDownListFor(m => m.Role, new SelectList(new[] {
                                    new { Value = "Admin", Text = "Admin" },
                                    new { Value = "Organizer", Text = "Organizer" },
                                    new { Value = "Customer", Text = "Customer" }
                                }, "Value", "Text", Model.Role),
                                "Select Role", new { @class = "form-control form-select", @readonly = "readonly", disabled = "disabled" })
                            @Html.HiddenFor(m => m.Role)
                            @Html.ValidationMessageFor(m => m.Role, "", new { @class = "text-danger" })
                            <div class="field-note">Role cannot be changed after user creation</div>
                        </div>

                        <div class="form-group">
                            @Html.Label("Account Status", htmlAttributes: new { @class = "form-label" })
                            <div class="radio-group">
                                <label class="radio-label">
                                    @Html.RadioButtonFor(m => m.IsActive, true, new { @class = "radio-input" })
                                    <i class="fas fa-check-circle" style="color: #10b981;"></i>
                                    Active
                                </label>
                                <label class="radio-label">
                                    @Html.RadioButtonFor(m => m.IsActive, false, new { @class = "radio-input" })
                                    <i class="fas fa-times-circle" style="color: #6b7280;"></i>
                                    Inactive
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- Role-specific Information Card -->
                    <div class="form-card">
                        @if (Model.Role == "Admin")
                        {
                            <h3 class="card-title">
                                <i class="fas fa-shield-alt card-icon"></i>
                                Admin Profile
                            </h3>
                            <div class="form-group">
                                @Html.LabelFor(m => m.AdminNotes, htmlAttributes: new { @class = "form-label" })
                                @Html.TextAreaFor(m => m.AdminNotes, new { @class = "form-control", placeholder = "Enter admin notes (optional)", rows = "4" })
                                @Html.ValidationMessageFor(m => m.AdminNotes, "", new { @class = "text-danger" })
                            </div>
                        }
                        else if (Model.Role == "Customer")
                        {
                            <h3 class="card-title">
                                <i class="fas fa-user card-icon"></i>
                                Customer Profile
                            </h3>
                            <div class="form-group">
                                @Html.LabelFor(m => m.CustomerFullName, htmlAttributes: new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.CustomerFullName, new { @class = "form-control", placeholder = "Full Name" })
                                @Html.ValidationMessageFor(m => m.CustomerFullName, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.CustomerPhoneNumber, htmlAttributes: new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.CustomerPhoneNumber, new { @class = "form-control", placeholder = "Phone Number" })
                                @Html.ValidationMessageFor(m => m.CustomerPhoneNumber, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.CustomerAddress, htmlAttributes: new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.CustomerAddress, new { @class = "form-control", placeholder = "Address" })
                                @Html.ValidationMessageFor(m => m.CustomerAddress, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.CustomerLoyaltyPoints, htmlAttributes: new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.CustomerLoyaltyPoints, new { @class = "form-control", placeholder = "Loyalty Points", type = "number" })
                                @Html.ValidationMessageFor(m => m.CustomerLoyaltyPoints, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.CustomerDateOfBirth, htmlAttributes: new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.CustomerDateOfBirth, "{0:yyyy-MM-dd}", new { @class = "form-control", placeholder = "Date of Birth", type = "date" })
                                @Html.ValidationMessageFor(m => m.CustomerDateOfBirth, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.CustomerGender, htmlAttributes: new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.CustomerGender, new SelectList(new[] {
                                        new { Value = "", Text = "Select Gender" },
                                        new { Value = "Male", Text = "Male" },
                                        new { Value = "Female", Text = "Female" },
                                        new { Value = "Other", Text = "Other" }
                                    }, "Value", "Text", Model.CustomerGender), new { @class = "form-control form-select" })
                                @Html.ValidationMessageFor(m => m.CustomerGender, "", new { @class = "text-danger" })
                            </div>
                        }
                        else if (Model.Role == "Organizer")
                        {
                            <h3 class="card-title">
                                <i class="fas fa-building card-icon"></i>
                                Organizer Profile
                            </h3>
                            <div class="form-group">
                                @Html.LabelFor(m => m.OrganizerOrganizationName, htmlAttributes: new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.OrganizerOrganizationName, new { @class = "form-control", placeholder = "Organization Name" })
                                @Html.ValidationMessageFor(m => m.OrganizerOrganizationName, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.OrganizerContactPerson, htmlAttributes: new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.OrganizerContactPerson, new { @class = "form-control", placeholder = "Contact Person" })
                                @Html.ValidationMessageFor(m => m.OrganizerContactPerson, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.OrganizerPhoneNumber, htmlAttributes: new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.OrganizerPhoneNumber, new { @class = "form-control", placeholder = "Phone Number" })
                                @Html.ValidationMessageFor(m => m.OrganizerPhoneNumber, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.OrganizerAddress, htmlAttributes: new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.OrganizerAddress, new { @class = "form-control", placeholder = "Address" })
                                @Html.ValidationMessageFor(m => m.OrganizerAddress, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.OrganizerDescription, htmlAttributes: new { @class = "form-label" })
                                @Html.TextAreaFor(m => m.OrganizerDescription, new { @class = "form-control", placeholder = "Organization description", rows = "4" })
                                @Html.ValidationMessageFor(m => m.OrganizerDescription, "", new { @class = "text-danger" })
                            </div>
                        }
                    </div>
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i>
                        Save Changes
                    </button>
                    <a href="@Url.Action("UserDetails", "Admin", new { id = Model.UserId })" class="btn btn-secondary">
                        <i class="fas fa-eye"></i>
                        View Details
                    </a>
                    <a href="@Url.Action("Users", "Admin")" class="btn btn-secondary">
                        <i class="fas fa-times"></i>
                        Cancel
                    </a>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        // Add smooth animations
        document.addEventListener('DOMContentLoaded', function() {
            const sections = document.querySelectorAll('.dashboard-header, .edit-user-section');
            sections.forEach((section, index) => {
                section.style.opacity = '0';
                section.style.transform = 'translateY(20px)';

                setTimeout(() => {
                    section.style.transition = 'all 0.5s ease';
                    section.style.opacity = '1';
                    section.style.transform = 'translateY(0)';
                }, index * 100);
            });

            // Add form validation styling
            const form = document.querySelector('.edit-user-form');
            if (form) {
                form.addEventListener('submit', function(e) {
                    const submitBtn = this.querySelector('button[type="submit"]');
                    if (submitBtn) {
                        const originalText = submitBtn.innerHTML;
                        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
                        submitBtn.disabled = true;

                        setTimeout(() => {
                            submitBtn.innerHTML = originalText;
                            submitBtn.disabled = false;
                        }, 3000);
                    }
                });
            }
        });
    </script>
}