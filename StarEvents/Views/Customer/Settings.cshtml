@model StarEvents.ViewModels.ChangePasswordViewModel

@{
    ViewBag.Title = "Account Settings";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    :root {
        --primary: #1259f3;
        --primary-light: #e8efff;
        --primary-dark: #0d47c1;
        --secondary: #1a237e;
        --success: #10b981;
        --warning: #f59e0b;
        --danger: #ef4444;
        --dark: #1f2937;
        --gray: #6b7280;
        --gray-light: #f8fafc;
        --gray-border: #e5e7eb;
        --shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
        --shadow-lg: 0 8px 30px rgba(0, 0, 0, 0.12);
    }

    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    body {
        background: #f8fafc;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        color: var(--dark);
        line-height: 1.6;
    }

    .settings-container {
        max-width: 900px;
        margin: 0 auto;
        padding: 40px 20px;
    }

    /* Header */
    .settings-header {
        text-align: center;
        margin-bottom: 50px;
    }

    .settings-title {
        font-size: 2.5rem;
        font-weight: 800;
        color: var(--dark);
        margin-bottom: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 16px;
    }

    .settings-icon {
        color: var(--primary);
    }

    .settings-subtitle {
        color: var(--gray);
        font-size: 1.1rem;
        font-weight: 400;
    }

    /* Main Settings Grid */
    .settings-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 30px;
        margin-bottom: 30px;
    }

    /* Settings Cards */
    .settings-card {
        background: white;
        border-radius: 20px;
        padding: 35px;
        box-shadow: var(--shadow-lg);
        border: 1px solid var(--gray-border);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

        .settings-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
        }

    .settings-card-wide {
        grid-column: 1 / -1;
    }

    .settings-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
    }

    /* Section Headers */
    .section-header {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-bottom: 25px;
        padding-bottom: 20px;
        border-bottom: 2px solid var(--gray-light);
    }

    .section-icon {
        width: 50px;
        height: 50px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.3rem;
        flex-shrink: 0;
    }

    .section-icon-password {
        background: linear-gradient(135deg, #e8efff, #d4e1ff);
        color: var(--primary);
    }

    .section-icon-deactivate {
        background: linear-gradient(135deg, #fef7cd, #fef3c7);
        color: var(--warning);
    }

    .section-icon-delete {
        background: linear-gradient(135deg, #fee2e2, #fecaca);
        color: var(--danger);
    }

    .section-icon-security {
        background: linear-gradient(135deg, #f0fdf4, #dcfce7);
        color: var(--success);
    }

    .section-title {
        font-size: 1.4rem;
        font-weight: 700;
        color: var(--dark);
        margin: 0;
    }

    .section-description {
        color: var(--gray);
        font-size: 0.95rem;
        margin-top: 5px;
    }

    /* Form Elements */
    .form-group {
        margin-bottom: 25px;
    }

    .form-label {
        display: block;
        font-weight: 600;
        color: var(--dark);
        margin-bottom: 10px;
        font-size: 0.95rem;
    }

    .input-group {
        position: relative;
        display: flex;
        align-items: stretch;
    }

    .form-control {
        width: 100%;
        padding: 14px 16px;
        border: 2px solid var(--gray-border);
        border-radius: 10px;
        font-size: 0.95rem;
        background: white;
        transition: all 0.3s ease;
        font-family: inherit;
    }

        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(18, 89, 243, 0.1);
        }

    .password-toggle {
        background: transparent;
        border: 2px solid var(--gray-border);
        border-left: none;
        border-radius: 0 10px 10px 0;
        padding: 0 16px;
        cursor: pointer;
        color: var(--gray);
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .password-toggle:hover {
            background: var(--gray-light);
            color: var(--dark);
        }

    .form-control:focus + .password-toggle {
        border-color: var(--primary);
    }

    .form-text {
        font-size: 0.85rem;
        color: var(--gray);
        margin-top: 8px;
        display: block;
    }

    /* Buttons */
    .btn {
        display: inline-flex;
        align-items: center;
        gap: 10px;
        padding: 14px 28px;
        border-radius: 12px;
        font-weight: 600;
        font-size: 0.95rem;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        border: none;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--primary), var(--secondary));
        color: white;
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(18, 89, 243, 0.3);
            color: white;
            text-decoration: none;
        }

    .btn-warning {
        background: linear-gradient(135deg, var(--warning), #d97706);
        color: white;
    }

        .btn-warning:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(245, 158, 11, 0.3);
            color: white;
            text-decoration: none;
        }

    .btn-danger {
        background: linear-gradient(135deg, var(--danger), #dc2626);
        color: white;
    }

        .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(239, 68, 68, 0.3);
            color: white;
            text-decoration: none;
        }

    /* Warning Sections */
    .warning-section {
        background: linear-gradient(135deg, #fffbeb, #fef3c7);
        border: 1px solid #fde68a;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 25px;
        position: relative;
        overflow: hidden;
    }

        .warning-section::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 4px;
            background: var(--warning);
        }

    .danger-section {
        background: linear-gradient(135deg, #fef2f2, #fee2e2);
        border: 1px solid #fecaca;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 25px;
        position: relative;
        overflow: hidden;
    }

        .danger-section::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 4px;
            background: var(--danger);
        }

    .warning-text {
        color: #92400e;
        font-size: 0.95rem;
        line-height: 1.5;
        margin: 0;
    }

    .danger-text {
        color: #991b1b;
        font-size: 0.95rem;
        line-height: 1.5;
        margin: 0;
    }

        .danger-text strong {
            font-weight: 700;
        }

    /* Security Status */
    .security-status {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 20px;
        background: linear-gradient(135deg, #f0fdf4, #dcfce7);
        border: 1px solid #bbf7d0;
        border-radius: 12px;
        margin-bottom: 25px;
    }

    .security-icon {
        width: 40px;
        height: 40px;
        border-radius: 10px;
        background: var(--success);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.1rem;
        flex-shrink: 0;
    }

    .security-content h4 {
        color: var(--dark);
        margin: 0 0 5px 0;
        font-size: 1.1rem;
    }

    .security-content p {
        color: var(--gray);
        margin: 0;
        font-size: 0.9rem;
    }

    /* Form Grid */
    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
    }

    .form-full-width {
        grid-column: 1 / -1;
    }

    /* Action Buttons Container */
    .action-buttons {
        display: flex;
        gap: 15px;
        margin-top: 30px;
        flex-wrap: wrap;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .settings-container {
            padding: 30px 15px;
            max-width: 100%;
        }

        .settings-title {
            font-size: 2rem;
        }

        .settings-grid {
            grid-template-columns: 1fr;
            gap: 20px;
        }

        .settings-card {
            padding: 25px;
        }

        .section-header {
            flex-direction: column;
            text-align: center;
            gap: 10px;
        }

        .form-grid {
            grid-template-columns: 1fr;
        }

        .action-buttons {
            flex-direction: column;
        }

        .btn {
            width: 100%;
            justify-content: center;
        }
    }

    @@media (max-width: 480px) {
        .settings-title {
            font-size: 1.8rem;
        }

        .settings-card {
            padding: 20px;
        }
    }
</style>

<div class="settings-container">
    <!-- Header -->
    <div class="settings-header">
        <h1 class="settings-title">
            <i class="fas fa-user-cog settings-icon"></i>
            Account Settings
        </h1>
        <p class="settings-subtitle">Manage your account security and preferences</p>
    </div>

    <!-- Main Settings Grid -->
    <div class="settings-grid">
        <!-- Change Password Card -->
        <div class="settings-card">
            <div class="section-header">
                <div class="section-icon section-icon-password">
                    <i class="fas fa-lock"></i>
                </div>
                <div>
                    <h3 class="section-title">Change Password</h3>
                    <p class="section-description">Update your account password</p>
                </div>
            </div>

            @using (Html.BeginForm("ChangePassword", "Customer", FormMethod.Post, new { autocomplete = "off" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-group">
                    @Html.LabelFor(m => m.CurrentPassword, "Current Password", new { @class = "form-label" })
                    <div class="input-group">
                        @Html.PasswordFor(m => m.CurrentPassword, new
                        {
                            @class = "form-control",
                            autocomplete = "current-password",
                            required = "required",
                            minlength = "6",
                            id = "CurrentPassword",
                            placeholder = "Enter your current password"
                        })
                        <span class="password-toggle" onclick="togglePassword('CurrentPassword', this)">
                            <i class="far fa-eye"></i>
                        </span>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.NewPassword, "New Password", new { @class = "form-label" })
                    <div class="input-group">
                        @Html.PasswordFor(m => m.NewPassword, new
                        {
                            @class = "form-control",
                            autocomplete = "new-password",
                            required = "required",
                            minlength = "6",
                            id = "NewPassword",
                            placeholder = "Enter your new password"
                        })
                        <span class="password-toggle" onclick="togglePassword('NewPassword', this)">
                            <i class="far fa-eye"></i>
                        </span>
                    </div>
                    <small class="form-text">Password must be at least 6 characters long</small>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.ConfirmPassword, "Confirm New Password", new { @class = "form-label" })
                    <div class="input-group">
                        @Html.PasswordFor(m => m.ConfirmPassword, new
                        {
                            @class = "form-control",
                            autocomplete = "new-password",
                            required = "required",
                            minlength = "6",
                            id = "ConfirmPassword",
                            placeholder = "Confirm your new password"
                        })
                        <span class="password-toggle" onclick="togglePassword('ConfirmPassword', this)">
                            <i class="far fa-eye"></i>
                        </span>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i>
                    Update Password
                </button>
            }
        </div>

        <!-- Account Actions Card -->
        <div class="settings-card">
            <div class="section-header">
                <div class="section-icon section-icon-deactivate">
                    <i class="fas fa-user-slash"></i>
                </div>
                <div>
                    <h3 class="section-title">Account Status</h3>
                    <p class="section-description">Manage your account availability</p>
                </div>
            </div>

            <div class="warning-section">
                <p class="warning-text">
                    <i class="fas fa-info-circle me-2"></i>
                    Deactivating your account will temporarily disable access. Your data will be preserved and you can reactivate anytime.
                </p>
            </div>

            @using (Html.BeginForm("Deactivate", "Customer", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-warning" onclick="return confirmDeactivate()">
                    <i class="fas fa-pause-circle"></i>
                    Deactivate Account
                </button>
            }
        </div>
    </div>

    <!-- Delete Account Card (Full Width) -->
    <div class="settings-card settings-card-wide">
        <div class="section-header">
            <div class="section-icon section-icon-delete">
                <i class="fas fa-trash-alt"></i>
            </div>
            <div>
                <h3 class="section-title">Delete Account</h3>
                <p class="section-description">Permanently remove your account and data</p>
            </div>
        </div>

        <div class="danger-section">
            <p class="danger-text">
                <i class="fas fa-exclamation-triangle me-2"></i>
                <strong>Warning:</strong> This action is permanent and cannot be undone.
                Deleting your account will permanently remove all your personal data,
                booking history, and account information from our systems.
            </p>
        </div>

        <div class="form-grid">
            <div class="form-group form-full-width">
                <label for="confirmDelete" class="form-label">
                    Type <span style="color: var(--danger); font-weight: 700;">DELETE</span> to confirm:
                </label>
                <input type="text" name="confirm" id="confirmDelete" class="form-control"
                       required autocomplete="off" pattern="DELETE"
                       placeholder="Type DELETE to confirm account deletion" />
            </div>

            <div class="form-group">
                <label for="currentDeletePassword" class="form-label">Current Password</label>
                <div class="input-group">
                    <input type="password" name="CurrentPassword" id="currentDeletePassword"
                           class="form-control" autocomplete="current-password"
                           required minlength="6" placeholder="Enter your current password" />
                    <span class="password-toggle" onclick="togglePassword('currentDeletePassword', this)">
                        <i class="far fa-eye"></i>
                    </span>
                </div>
            </div>
        </div>

        <div class="action-buttons">
            <button type="submit" class="btn btn-danger" onclick="return confirmDelete()">
                <i class="fas fa-exclamation-triangle"></i>
                Delete Account Permanently
            </button>

            <button type="button" class="btn btn-secondary" onclick="showDeactivateOption()">
                <i class="fas fa-user-slash"></i>
                Consider Deactivation Instead
            </button>
        </div>
    </div>
</div>

<!-- SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Password/Account Alerts
        @if (TempData["Success"] != null)
        {
            <text>
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: '@TempData["Success"]',
                timer: 3000,
                showConfirmButton: false
            });
            </text>
        }
        @if (TempData["Error"] != null)
        {
            <text>
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: '@TempData["Error"]',
                confirmButtonColor: '#1259f3'
            });
            </text>
        }
    });

    // Password visibility toggle
    function togglePassword(fieldId, btn) {
        const input = document.getElementById(fieldId);
        const icon = btn.querySelector('i');
        if (input.type === "password") {
            input.type = "text";
            icon.classList.remove("fa-eye");
            icon.classList.add("fa-eye-slash");
        } else {
            input.type = "password";
            icon.classList.remove("fa-eye-slash");
            icon.classList.add("fa-eye");
        }
    }

    // Confirmation dialogs
    function confirmDeactivate() {
        return Swal.fire({
            title: 'Deactivate Account?',
            text: 'Your account will be temporarily disabled. You can reactivate by logging in again.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, Deactivate',
            cancelButtonText: 'Cancel',
            confirmButtonColor: '#f59e0b',
            reverseButtons: true
        }).then((result) => {
            return result.isConfirmed;
        });
    }

    function confirmDelete() {
        const confirmInput = document.getElementById('confirmDelete');
        if (confirmInput.value !== 'DELETE') {
            Swal.fire({
                title: 'Confirmation Required',
                text: 'Please type DELETE in the confirmation field',
                icon: 'error',
                confirmButtonColor: '#1259f3'
            });
            return false;
        }

        return Swal.fire({
            title: 'Permanent Account Deletion',
            html: `
                <div style="text-align: left;">
                    <p style="margin-bottom: 15px; color: #ef4444; font-weight: 600;">This action cannot be undone!</p>
                    <ul style="text-align: left; margin-left: 20px;">
                        <li>All personal data will be permanently deleted</li>
                        <li>Your booking history will be lost</li>
                        <li>Account recovery will be impossible</li>
                    </ul>
                </div>
            `,
            icon: 'error',
            showCancelButton: true,
            confirmButtonText: 'Yes, Delete Permanently',
            cancelButtonText: 'Cancel',
            confirmButtonColor: '#ef4444',
            reverseButtons: true
        }).then((result) => {
            return result.isConfirmed;
        });
    }

    function showDeactivateOption() {
        Swal.fire({
            title: 'Consider Deactivation',
            html: `
                <div style="text-align: left;">
                    <p style="margin-bottom: 15px;">Instead of permanent deletion, you can:</p>
                    <ul style="text-align: left; margin-left: 20px;">
                        <li>Keep your data safe</li>
                        <li>Reactivate anytime by logging in</li>
                        <li>Preserve your booking history</li>
                    </ul>
                </div>
            `,
            icon: 'info',
            confirmButtonText: 'Learn More',
            confirmButtonColor: '#1259f3'
        });
    }
</script>