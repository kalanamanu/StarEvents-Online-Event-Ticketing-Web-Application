@model StarEvents.ViewModels.MyTicketsViewModel

@{
    ViewBag.Title = "My Tickets";
}

<style>
    :root {
        --primary: #1259f3;
        --primary-light: #e8efff;
        --primary-dark: #0d47c1;
        --secondary: #1a237e;
        --success: #10b981;
        --warning: #f59e0b;
        --danger: #ef4444;
        --dark: #1f2937;
        --gray: #6b7280;
        --gray-light: #f8fafc;
        --gray-border: #e5e7eb;
        --shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
        --shadow-lg: 0 8px 30px rgba(0, 0, 0, 0.12);
    }

    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    body {
        background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        color: var(--dark);
        min-height: 100vh;
        padding: 20px 0;
    }

    .tickets-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    /* Header Section */
    .tickets-header {
        text-align: center;
        padding: 40px 20px 30px 20px;
        background: linear-gradient(135deg, var(--primary-light) 0%, #f0f7ff 100%);
        border-radius: 20px;
        margin: 0 0 30px 0;
        position: relative;
        overflow: hidden;
    }

        .tickets-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" fill="rgba(18,89,243,0.03)"><path d="M50,0 L60,40 L100,50 L60,60 L50,100 L40,60 L0,50 L40,40 Z"/></svg>');
            background-size: 60px 60px;
            animation: float 20s infinite linear;
        }

    @@keyframes float {
        0% {
            background-position: 0 0;
        }

        100% {
            background-position: 60px 60px;
        }
    }

    .tickets-title {
        font-size: 2.5rem;
        font-weight: 800;
        color: var(--primary);
        margin-bottom: 8px;
        position: relative;
        z-index: 1;
        background: linear-gradient(135deg, var(--primary), var(--secondary));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .tickets-subtitle {
        font-size: 1.1rem;
        color: var(--gray);
        position: relative;
        z-index: 1;
        font-weight: 500;
    }

    /* Stats Cards */
    .stats-section {
        margin-bottom: 30px;
    }

    .stats-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background: white;
        border-radius: 16px;
        padding: 25px 20px;
        box-shadow: var(--shadow);
        border: 1px solid var(--gray-border);
        text-align: center;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

        .stat-card:hover {
            transform: translateY(-3px);
            box-shadow: var(--shadow-lg);
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
        }

        .stat-card.active::before {
            background: linear-gradient(135deg, var(--success), #059669);
        }

        .stat-card.used::before {
            background: linear-gradient(135deg, var(--danger), #dc2626);
        }

    .stat-icon {
        width: 50px;
        height: 50px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 15px auto;
        font-size: 1.3rem;
    }

    .stat-card .stat-icon {
        background: var(--primary-light);
        color: var(--primary);
    }

    .stat-card.active .stat-icon {
        background: #dcfce7;
        color: var(--success);
    }

    .stat-card.used .stat-icon {
        background: #fee2e2;
        color: var(--danger);
    }

    .stat-count {
        font-size: 2.2rem;
        font-weight: 800;
        margin-bottom: 5px;
        line-height: 1;
    }

    .stat-card .stat-count {
        color: var(--primary);
    }

    .stat-card.active .stat-count {
        color: var(--success);
    }

    .stat-card.used .stat-count {
        color: var(--danger);
    }

    .stat-label {
        font-weight: 700;
        color: var(--gray);
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    /* Search and Filter Section */
    .search-filter-section {
        background: white;
        border-radius: 16px;
        padding: 25px;
        box-shadow: var(--shadow);
        border: 1px solid var(--gray-border);
        margin-bottom: 30px;
    }

    .search-form {
        display: flex;
        gap: 12px;
        margin-bottom: 20px;
        align-items: center;
        flex-wrap: wrap;
    }

    .search-input-group {
        flex: 1;
        min-width: 300px;
        position: relative;
    }

    .search-input {
        width: 100%;
        padding: 14px 45px 14px 16px;
        border: 2px solid var(--gray-border);
        border-radius: 10px;
        font-size: 1rem;
        transition: all 0.3s ease;
        background: var(--gray-light);
    }

        .search-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(18, 89, 243, 0.1);
            background: white;
        }

    .search-btn {
        background: linear-gradient(135deg, var(--primary), var(--secondary));
        color: white;
        border: none;
        border-radius: 10px;
        padding: 14px 24px;
        font-weight: 600;
        font-size: 0.95rem;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
        white-space: nowrap;
    }

        .search-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(18, 89, 243, 0.3);
        }

    .reset-link {
        color: var(--gray);
        text-decoration: none;
        font-weight: 600;
        padding: 12px 16px;
        border-radius: 8px;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 6px;
        white-space: nowrap;
    }

        .reset-link:hover {
            background: var(--gray-light);
            color: var(--primary);
            text-decoration: none;
        }

    .filter-buttons {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .filter-btn {
        padding: 12px 20px;
        border-radius: 10px;
        border: 2px solid var(--primary);
        background: white;
        color: var(--primary);
        font-weight: 600;
        font-size: 0.9rem;
        cursor: pointer;
        text-decoration: none;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 6px;
    }

        .filter-btn.active,
        .filter-btn:hover {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(18, 89, 243, 0.2);
        }

    /* Tickets Grid */
    .tickets-grid {
        display: grid;
        gap: 20px;
        margin-bottom: 40px;
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 60px 20px;
        background: white;
        border-radius: 16px;
        box-shadow: var(--shadow);
        border: 2px dashed var(--gray-border);
    }

    .empty-icon {
        font-size: 4rem;
        color: var(--gray);
        margin-bottom: 20px;
        opacity: 0.5;
    }

    .empty-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--dark);
        margin-bottom: 10px;
    }

    .empty-description {
        color: var(--gray);
        font-size: 1rem;
        margin-bottom: 25px;
        max-width: 400px;
        margin-left: auto;
        margin-right: auto;
        line-height: 1.5;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .tickets-header {
            padding: 30px 20px 25px 20px;
        }

        .tickets-title {
            font-size: 2rem;
        }

        .stats-cards {
            grid-template-columns: 1fr;
            gap: 15px;
        }

        .search-form {
            flex-direction: column;
            align-items: stretch;
        }

        .search-input-group {
            min-width: auto;
        }

        .filter-buttons {
            justify-content: center;
        }

        .search-btn,
        .reset-link {
            justify-content: center;
        }
    }

    @@media (max-width: 480px) {
        .tickets-container {
            padding: 0 15px;
        }

        .tickets-header {
            padding: 25px 15px 20px 15px;
        }

        .tickets-title {
            font-size: 1.8rem;
        }

        .search-filter-section {
            padding: 20px;
        }

        .filter-buttons {
            flex-direction: column;
        }

        .filter-btn {
            justify-content: center;
        }
    }
</style>

<div class="tickets-container">
    <!-- Header Section -->
    <div class="tickets-header">
        <h1 class="tickets-title">My Tickets</h1>
        <p class="tickets-subtitle">Manage and access all your event tickets in one place</p>
    </div>

    <!-- Stats Section -->
    <div class="stats-section">
        <div class="stats-cards">
            <div class="stat-card active">
                <div class="stat-icon">
                    <i class="fas fa-ticket-alt"></i>
                </div>
                <div class="stat-count">@Model.ActiveCount</div>
                <div class="stat-label">Active Tickets</div>
            </div>
            <div class="stat-card used">
                <div class="stat-icon">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="stat-count">@Model.UsedCount</div>
                <div class="stat-label">Used Tickets</div>
            </div>
        </div>
    </div>

    <!-- Search and Filter Section -->
    <div class="search-filter-section">
        <form method="get" class="search-form">
            <div class="search-input-group">
                <input type="text" name="search" value="@Model.Search" placeholder="Search by event name or ticket code..." class="search-input" />
            </div>
            <button type="submit" class="search-btn">
                <i class="fas fa-search"></i>
                Search Tickets
            </button>
            <a href="@Url.Action("MyTickets", "CustomerTickets", new { filter = "all", search = "" })" class="reset-link">
                <i class="fas fa-redo"></i>
                Reset
            </a>
        </form>

        <div class="filter-buttons">
            <a href="@Url.Action("MyTickets", "CustomerTickets", new { filter = "all", search = Model.Search })"
               class="filter-btn@(Model.Filter == "all" ? " active" : "")">
                <i class="fas fa-layer-group"></i>
                All Tickets
            </a>
            <a href="@Url.Action("MyTickets", "CustomerTickets", new { filter = "active", search = Model.Search })"
               class="filter-btn@(Model.Filter == "active" ? " active" : "")">
                <i class="fas fa-play-circle"></i>
                Active
            </a>
            <a href="@Url.Action("MyTickets", "CustomerTickets", new { filter = "used", search = Model.Search })"
               class="filter-btn@(Model.Filter == "used" ? " active" : "")">
                <i class="fas fa-check-circle"></i>
                Used
            </a>
        </div>
    </div>

    <!-- Tickets Grid -->
    @if (Model.Tickets != null && Model.Tickets.Any())
    {
        <div class="tickets-grid">
            @foreach (var ticket in Model.Tickets)
            {
                @Html.Partial("_EticketPartial", ticket)
            }
        </div>
    }
    else
    {
        <div class="empty-state">
            <div class="empty-icon">
                <i class="fas fa-ticket-alt"></i>
            </div>
            <h3 class="empty-title">No Tickets Found</h3>
            <p class="empty-description">
                @if (!string.IsNullOrEmpty(Model.Search))
                {
                    <text>No tickets match your search criteria. Try adjusting your search terms or filters.</text>
                }
                else
                {
                    <text>You don't have any tickets yet. Start by booking your first event!</text>
                }
            </p>
            @if (string.IsNullOrEmpty(Model.Search))
            {
                <a href="/Events" class="search-btn" style="text-decoration: none; display: inline-flex;">
                    <i class="fas fa-calendar-alt"></i>
                    Explore Events
                </a>
            }
        </div>
    }
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Add smooth animations to stats cards
        const statCards = document.querySelectorAll('.stat-card');
        statCards.forEach((card, index) => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';

            setTimeout(() => {
                card.style.transition = 'all 0.5s ease';
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 200);
        });

        // Add loading state to search button
        const searchForm = document.querySelector('.search-form');
        if (searchForm) {
            searchForm.addEventListener('submit', function() {
                const button = this.querySelector('.search-btn');
                const originalText = button.innerHTML;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Searching...';
                button.disabled = true;

                setTimeout(() => {
                    button.innerHTML = originalText;
                    button.disabled = false;
                }, 2000);
            });
        }

        // Add active state animation to filter buttons
        const filterButtons = document.querySelectorAll('.filter-btn');
        filterButtons.forEach(button => {
            button.addEventListener('click', function() {
                filterButtons.forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // Auto-focus search input
        const searchInput = document.querySelector('.search-input');
        if (searchInput && !searchInput.value) {
            setTimeout(() => {
                searchInput.focus();
            }, 300);
        }
    });
</script>