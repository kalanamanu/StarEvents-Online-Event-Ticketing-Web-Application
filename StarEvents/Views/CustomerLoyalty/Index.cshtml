@model StarEvents.ViewModels.LoyaltyViewModel

@{
    ViewBag.Title = "My Loyalty";
}

<style>
    :root {
        --primary: #1259f3;
        --primary-light: #e8efff;
        --primary-dark: #0d47c1;
        --secondary: #1a237e;
        --success: #10b981;
        --warning: #f59e0b;
        --danger: #ef4444;
        --dark: #1f2937;
        --gray: #6b7280;
        --gray-light: #f8fafc;
        --gray-border: #e5e7eb;
        --shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
        --shadow-lg: 0 8px 30px rgba(0, 0, 0, 0.12);
    }

    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    body {
        background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        color: var(--dark);
        min-height: 100vh;
        padding: 20px 0;
    }

    .loyalty-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    /* Header Section */
    .loyalty-header {
        text-align: center;
        padding: 40px 20px 30px 20px;
        margin-bottom: 30px;
    }

    .loyalty-title {
        font-size: 2.5rem;
        font-weight: 800;
        color: var(--primary);
        margin-bottom: 12px;
        background: linear-gradient(135deg, var(--primary), var(--secondary));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .loyalty-subtitle {
        font-size: 1.1rem;
        color: var(--gray);
        font-weight: 500;
        max-width: 600px;
        margin: 0 auto;
        line-height: 1.5;
    }

    /* Points Card */
    .points-card {
        max-width: 500px;
        margin: 0 auto 40px auto;
        background: linear-gradient(135deg, var(--primary), var(--secondary));
        color: white;
        border-radius: 24px;
        box-shadow: var(--shadow-lg);
        padding: 40px 30px;
        text-align: center;
        position: relative;
        overflow: hidden;
    }

        .points-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" fill="rgba(255,255,255,0.05)"><path d="M50,0 L60,40 L100,50 L60,60 L50,100 L40,60 L0,50 L40,40 Z"/></svg>');
            background-size: 80px 80px;
            animation: float 20s infinite linear;
        }

    @@keyframes float {
        0% {
            background-position: 0 0;
        }

        100% {
            background-position: 80px 80px;
        }
    }

    .points-label {
        font-size: 1rem;
        font-weight: 600;
        letter-spacing: 0.5px;
        margin-bottom: 10px;
        opacity: 0.9;
        position: relative;
        z-index: 1;
    }

    .points-value {
        font-size: 3.5rem;
        font-weight: 900;
        letter-spacing: 0.05em;
        margin-bottom: 5px;
        line-height: 1;
        position: relative;
        z-index: 1;
    }

    .points-subtext {
        font-size: 0.9rem;
        opacity: 0.8;
        font-weight: 500;
        position: relative;
        z-index: 1;
    }

    /* Info Cards */
    .info-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 20px;
        margin-bottom: 40px;
    }

    .info-card {
        background: white;
        border-radius: 16px;
        padding: 25px;
        box-shadow: var(--shadow);
        border: 1px solid var(--gray-border);
        text-align: center;
        transition: all 0.3s ease;
        position: relative;
    }

        .info-card:hover {
            transform: translateY(-3px);
            box-shadow: var(--shadow-lg);
        }

        .info-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: linear-gradient(135deg, var(--success), #059669);
            border-radius: 2px 0 0 2px;
        }

    .info-icon {
        width: 60px;
        height: 60px;
        background: var(--success);
        border-radius: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.5rem;
        margin: 0 auto 15px auto;
    }

    .info-title {
        font-size: 1.1rem;
        font-weight: 700;
        color: var(--dark);
        margin-bottom: 8px;
    }

    .info-description {
        font-size: 0.9rem;
        color: var(--gray);
        line-height: 1.5;
    }

    /* Transactions Section */
    .transactions-section {
        background: white;
        border-radius: 16px;
        box-shadow: var(--shadow);
        border: 1px solid var(--gray-border);
        overflow: hidden;
        margin-bottom: 40px;
    }

    .section-header {
        background: var(--gray-light);
        padding: 20px 25px;
        border-bottom: 1px solid var(--gray-border);
    }

    .section-title {
        font-size: 1.3rem;
        font-weight: 700;
        color: var(--dark);
        margin: 0;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .section-icon {
        color: var(--primary);
    }

    .transactions-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 0.9rem;
    }

        .transactions-table th {
            background: var(--gray-light);
            padding: 15px 20px;
            text-align: left;
            font-weight: 700;
            color: var(--dark);
            border-bottom: 1px solid var(--gray-border);
            font-size: 0.85rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .transactions-table td {
            padding: 15px 20px;
            border-bottom: 1px solid var(--gray-border);
            color: var(--dark);
        }

        .transactions-table tr:last-child td {
            border-bottom: none;
        }

        .transactions-table tr:hover {
            background: var(--gray-light);
        }

    .type-badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-weight: 700;
        font-size: 0.8rem;
        display: inline-flex;
        align-items: center;
        gap: 4px;
    }

    .type-earned {
        background: #dcfce7;
        color: #166534;
        border: 1px solid #bbf7d0;
    }

    .type-redeemed {
        background: #fef3c7;
        color: #92400e;
        border: 1px solid #fde68a;
    }

    .type-expired {
        background: #fee2e2;
        color: #991b1b;
        border: 1px solid #fecaca;
    }

    .points-pos {
        color: var(--success);
        font-weight: 700;
        font-size: 0.9rem;
    }

    .points-neg {
        color: var(--danger);
        font-weight: 700;
        font-size: 0.9rem;
    }

    .amount-positive {
        color: var(--success);
        font-weight: 700;
    }

    .amount-negative {
        color: var(--danger);
        font-weight: 700;
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: var(--gray);
    }

    .empty-icon {
        font-size: 3rem;
        margin-bottom: 15px;
        opacity: 0.5;
    }

    .empty-title {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 8px;
        color: var(--dark);
    }

    .empty-description {
        font-size: 0.95rem;
        max-width: 400px;
        margin: 0 auto;
        line-height: 1.5;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .loyalty-title {
            font-size: 2rem;
        }

        .points-card {
            padding: 30px 20px;
            margin-bottom: 30px;
        }

        .points-value {
            font-size: 2.8rem;
        }

        .info-cards {
            grid-template-columns: 1fr;
        }

        .transactions-table {
            font-size: 0.8rem;
        }

            .transactions-table th,
            .transactions-table td {
                padding: 12px 15px;
            }
    }

    @@media (max-width: 480px) {
        .loyalty-container {
            padding: 0 15px;
        }

        .loyalty-title {
            font-size: 1.8rem;
        }

        .points-card {
            padding: 25px 15px;
        }

        .points-value {
            font-size: 2.5rem;
        }

        .transactions-table {
            display: block;
            overflow-x: auto;
            white-space: nowrap;
        }
    }
</style>

<div class="loyalty-container">
    <!-- Header Section -->
    <div class="loyalty-header">
        <h1 class="loyalty-title">My Loyalty Program</h1>
        <p class="loyalty-subtitle">Earn points with every booking and redeem them for exclusive rewards</p>
    </div>

    <!-- Points Card -->
    <div class="points-card">
        <div class="points-label">Total Loyalty Points</div>
        <div class="points-value">@Model.CurrentPoints</div>
        <div class="points-subtext">Available for redemption</div>
    </div>

    <!-- Info Cards -->
    <div class="info-cards">
        <div class="info-card">
            <div class="info-icon">
                <i class="fas fa-star"></i>
            </div>
            <h3 class="info-title">How to Earn Points</h3>
            <p class="info-description">
                Earn 1 point for every LKR 100 spent on event bookings.
                Additional points for referrals and special promotions.
            </p>
        </div>

        <div class="info-card">
            <div class="info-icon">
                <i class="fas fa-gift"></i>
            </div>
            <h3 class="info-title">How to Redeem</h3>
            <p class="info-description">
                Use your points during checkout to get discounts on future bookings.
                1 point = 1 LKR discount.
            </p>
        </div>

        <div class="info-card">
            <div class="info-icon">
                <i class="fas fa-clock"></i>
            </div>
            <h3 class="info-title">Points Expiry</h3>
            <p class="info-description">
                Loyalty points are valid for 12 months from the date they are earned.
                Use them before they expire!
            </p>
        </div>
    </div>

    <!-- Transactions Section -->
    <div class="transactions-section">
        <div class="section-header">
            <h2 class="section-title">
                <i class="fas fa-history section-icon"></i>
                Loyalty Transactions
            </h2>
        </div>

        @if (Model.Transactions != null && Model.Transactions.Any())
        {
            <div class="table-container">
                <table class="transactions-table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Type</th>
                            <th>Description</th>
                            <th>Amount</th>
                            <th>Points</th>
                            <th>Balance</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var txn in Model.Transactions.OrderByDescending(t => t.Date))
                        {
                            <tr>
                                <td>@txn.Date.ToString("MMM dd, yyyy")</td>
                                <td>
                                    @{
                                        var typeClass = "type-earned";
                                        var typeIcon = "fas fa-plus-circle";
                                        if (txn.Type?.ToLower().Contains("redeem") == true)
                                        {
                                            typeClass = "type-redeemed";
                                            typeIcon = "fas fa-minus-circle";
                                        }
                                        else if (txn.Type?.ToLower().Contains("expire") == true)
                                        {
                                            typeClass = "type-expired";
                                            typeIcon = "fas fa-clock";
                                        }
                                    }
                                    <span class="type-badge @typeClass">
                                        <i class="@typeIcon"></i>
                                        @txn.Type
                                    </span>
                                </td>
                                <td>@txn.Description</td>
                                <td>
                                    @if (txn.Amount != 0)
                                    {
                                        <span class="@(txn.Amount > 0 ? "amount-positive" : "amount-negative")">
                                            LKR @Math.Abs(txn.Amount).ToString("N2")
                                        </span>
                                    }
                                    else
                                    {
                                        <span>-</span>
                                    }
                                </td>
                                <td>
                                    @if (txn.Points > 0)
                                    {
                                        <span class="points-pos">
                                            <i class="fas fa-arrow-up"></i>
                                            @txn.Points
                                        </span>
                                    }
                                    else if (txn.Points < 0)
                                    {
                                        <span class="points-neg">
                                            <i class="fas fa-arrow-down"></i>
                                            @Math.Abs(txn.Points)
                                        </span>
                                    }
                                    else
                                    {
                                        <span>-</span>
                                    }
                                </td>
                                <td>
                                    <strong>@txn.Balance</strong>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="fas fa-gift"></i>
                </div>
                <h3 class="empty-title">No Transactions Yet</h3>
                <p class="empty-description">
                    You haven't earned any loyalty points yet. Start booking events to earn points and unlock rewards!
                </p>
            </div>
        }
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Add smooth animations
        const cards = document.querySelectorAll('.points-card, .info-card');
        cards.forEach((card, index) => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';

            setTimeout(() => {
                card.style.transition = 'all 0.5s ease';
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 100);
        });

        // Add hover effects to table rows
        const tableRows = document.querySelectorAll('.transactions-table tbody tr');
        tableRows.forEach(row => {
            row.addEventListener('mouseenter', function() {
                this.style.backgroundColor = 'var(--gray-light)';
            });

            row.addEventListener('mouseleave', function() {
                this.style.backgroundColor = '';
            });
        });

        // Add counting animation to points card
        const pointsValue = document.querySelector('.points-value');
        if (pointsValue) {
            const finalValue = @Model.CurrentPoints;
            let currentValue = 0;
            const duration = 2000;
            const increment = finalValue / (duration / 16);

            const timer = setInterval(() => {
                currentValue += increment;
                if (currentValue >= finalValue) {
                    currentValue = finalValue;
                    clearInterval(timer);
                }
                pointsValue.textContent = Math.floor(currentValue);
            }, 16);
        }
    });
</script>